
'''
The data

240441 time points (rest)
64 electrodes

https://raphaelvallat.com/bandpower.html
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9206021/
https://openneuro.org/datasets/ds003838/versions/1.0.0

'''
import matplotlib.pyplot as plt
import numpy as np
import scipy.signal as sig

import data_loader as dl
import fourier
import constants as const
import spectral_power as sp
import data_processing as dp





# ----------------------------------------- PLOTTING ----------------------------------------------


def save_plot(filename, arr, title = '', xlabel = '', ylabel = ''):
    #plt.switch_backend('Agg')
    plt.plot(arr)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.savefig(DIRECTORY + filename + ".png")
    plt.figure()
 




# ---------------------------------------------- BANDPASS ----------------------------------------------

def bandpass_filter(data, low_freq, high_freq, steepness = 3, sampling_rate=const.SAMPLING_RATE):

	sos = sig.butter(steepness, [low_freq * 2/sampling_rate, high_freq * 2/sampling_rate], btype = "bandpass", output = "sos")
	filt_data = sig.sosfilt(sos, data)

	return filt_data


# ---------------------------------------------- PIPELINE ----------------------------------------------


# Creates a 4-dimensional array
def pipeline(subjects, channels, states, waves, start=0, stop=10000, smooth=0):
	
	fft_arr = np.ndarray(shape=( len(subjects),len(channels), len(states), len(waves) ))
	bp_arr = np.ndarray(shape=( len(subjects),len(channels), len(states), len(waves) ))
	power_arr = np.ndarray(shape=( len(subjects),len(channels), len(states), len(waves) ))

	for i in range(len(subjects)):
		subject = subjects[i]

		for j in range(len(channels)):
			channel_name = channels[j]

			for k in range(len(states)):
				state = states[k]

				for m in range(len(waves)):
					wave = waves[m]
					print("\n")
					#print("Analyzing... \nSubject: " + str(subject) + " \nChannel: " + channel_name + " \nState: " + state + " \nWave: " + wave)

					raw_data = dl.get_channel_data(subject, channel_name, state)

					if wave=='alpha':
						bandpass_data = bandpass_filter(raw_data, low_freq=const.ALPHA_MIN, high_freq=const.ALPHA_MAX)
					elif wave=='theta':
						bandpass_data = bandpass_filter(raw_data, low_freq=const.THETA_MIN, high_freq=const.THETA_MAX)

					#fft_data = fourier_transform(raw_data, SAMPLING_RATE, filename=str, title=str, smooth=smooth, label=state)

					if wave == 'alpha':
						fft_arr[i, j, k, m] = fourier.get_alpha_average(raw_data, start, stop)
						bp_arr[i, j, k, m] = fourier.get_alpha_average(bandpass_data, start, stop)


					elif wave == 'theta':
						fft_arr[i, j, k, m] = fourier.get_theta_average(raw_data, start, stop)
						bp_arr[i, j, k, m] = fourier.get_theta_average(bandpass_data, start, stop)
				
					power_arr[i, j, k, m] = sp.relative_band_power(mem_data, const.SAMPLING_RATE, const.SECONDS, wave)

	return fft_arr, bp_arr, power_arr



# Gets a specific data point from an array generated by the pipeline function.
def get_data_point(arr, subjects, channels, states, waves, subject, channel, state, wave):

	
	subject_index = np.where(subjects == subject)[0]
	channel_index = np.where(channels == channel)[0]
	state_index = np.where(states == state)[0]
	wave_index = np.where(waves == wave)[0]

	return arr[subject_index, channel_index, state_index, wave_index][0]


def clear_file(filename):
	f = open(filename, "w")
	f.write('')
	f.close()


def main():

	subjects = np.array([32, 42, 43])
	channels = np.array(["Fz"])
	states = np.array(['memory', 'rest'])
	waves = np.array(['theta'])

	for subject in subjects:
		mem_data = dl.get_channel_data(subject, 'Fz', 'memory')
		rest_data = dl.get_channel_data(subject, 'Fz', 'rest')

		mem_average = 0
		rest_average = 0

		for i in range(20):
			mem_frag = dp.get_nth_second(mem_data, i, const.SAMPLING_RATE)
			rest_frag = dp.get_nth_second(rest_data, i, const.SAMPLING_RATE)

			mem_power = sp.relative_band_power(mem_frag, const.SAMPLING_RATE, 'theta')
			rest_power = sp.relative_band_power(rest_frag, const.SAMPLING_RATE, 'theta')

			mem_average += mem_power
			rest_average += rest_power

		mem_average /= 20
		rest_average /= 20
		print(mem_average)
		print(rest_average)
		sp.plot_spectral_power(mem_data, 'memory' + str(subject), const.SAMPLING_RATE, label='memory', newFig = False)
		sp.plot_spectral_power(rest_data, 'rest' + str(subject), const.SAMPLING_RATE, label='rest', newFig = False)
		plt.figure()
		#mem_power = sp.relative_band_power(mem_data, const.SAMPLING_RATE, 'theta')
		#rest_power = sp.relative_band_power(rest_data, const.SAMPLING_RATE, 'theta')
		#diff = round((mem_power*100 - rest_power*100), 2)
		#print("Overall: ", diff)


	'''
	size = 5000


	start = 0
	stop = 100000
	smooth = int((stop-start)
		/1000)

	


	clear_file("differences.csv")
	clear_file("filt_differences.csv")

	epoch_seconds = 2
	epoch_samples = 2 * const.SAMPLING_RATE

	for i in range(10):

		fft_arr, bp_arr = pipeline(subjects, channels, states, waves, start=i*epoch_samples, stop=(i+1)*epoch_samples)


		for i in range(len(subjects)):
			subject = subjects[i]
			print("\n")
			print("Subject ", str(subject), " Channel Fz, Theta wave")

			memory = get_data_point(fft_arr, subjects, channels, states, waves, subject, "Fz", 'memory', 'theta')
			rest = get_data_point(fft_arr, subjects, channels, states, waves, subject, "Fz", 'rest', 'theta')
			print("Memory (Raw): ", round(memory, 2), "; Rest (Raw): ", round(rest, 2))
			diff = round((memory-rest)/rest, 2)
			print(diff)
			f = open("differences.csv", "a")
			f.write(str(diff) + ", ")
			f.close()


			memory = get_data_point(bp_arr, subjects, channels, states, waves, subject, "Fz", 'memory', 'theta')
			rest = get_data_point(bp_arr, subjects, channels, states, waves, subject, "Fz", 'rest', 'theta')
			print("Memory (BP): ", round(memory, 2), "; Rest (BP): ", round(rest, 2))
			diff = round((memory-rest)/rest, 2)
			print(diff)
			f = open("filt_differences.csv", "a")
			f.write(str(diff) + ", ")
			f.close()

	print("Hello World!")
	
	'''


if __name__ == "__main__":
    main()